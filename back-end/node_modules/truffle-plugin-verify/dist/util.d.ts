import { Logger, Options, TruffleConfig, TruffleProvider } from './types';
export declare const abort: (message: string, logger?: Logger, code?: number) => never;
export declare const enforce: (condition: any, message: string, logger?: Logger, code?: number) => void;
export declare const enforceOrThrow: (condition: any, message: string) => void;
/**
 * The metadata in the Truffle artifact file changes source paths on Windows. Instead of
 * D:\Hello\World.sol, it looks like /D/Hello/World.sol. When trying to read this path,
 * Windows cannot find it, since it is not a valid path. This function changes
 * /D/Hello/World.sol to D:\Hello\World.sol. This way, Windows is able to read these source
 * files. It does not change regular Unix paths, only Unixified Windows paths. It also does
 * not make any changes on platforms that aren't Windows.
 */
export declare const normaliseContractPath: (contractPath: string, options: Options) => string;
export declare const getAbsolutePath: (contractPath: string, options: Options) => string;
/**
 * If the network config includes a provider we use it to retrieve the network info
 * for the network. If that fails, we fall back to the config's network ID.
 */
export declare const getNetwork: (config: TruffleConfig, logger: Logger) => Promise<{
    chainId: any;
    networkId: any;
}>;
/**
 * Check whether the address is an EIP1967 proxy and if so, return its implementation address. Note that only the LOGIC
 * variety of EIP1967 is supported, not the BEACON variety. If support for BEACON proxies is added to the openzeppelin
 * plugin, I will add it here as well
 */
export declare const getImplementationAddress: (address: string, logger: Logger, provider?: TruffleProvider) => Promise<string | undefined>;
export declare const getRpcSendFunction: (provider?: TruffleProvider) => Function | undefined;
export declare const deepCopy: <T>(obj: T) => T;
export declare const getAddressFromStorage: (storage: string) => string;
export declare const getApiKey: (config: TruffleConfig, apiUrl: string, logger: Logger) => string;
